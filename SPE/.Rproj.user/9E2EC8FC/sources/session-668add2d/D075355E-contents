FOLOUR_trade_dt <- FABLE_Products_WA_VF3 %>%
  filter(FABLE_Item %in% c("Corn", "Wheat", "Rice", "Cocoa", "Palm_oil", "Coffee", "Soyabean"))

FOLOUR_trade_dt$Trade_Quantity_Adjusted <- as.numeric(FOLOUR_trade_dt$Trade_Quantity_Adjusted) / 1000
FOLOUR_trade_dt$Trade_Value_Adjusted <- as.numeric(FOLOUR_trade_dt$Trade_Value_Adjusted) / 1000
colnames(FOLOUR_trade_dt)


# Fonction pour détecter et traiter les outliers sur Trade_Quantity_Adjusted
# et ajuster Trade_Value_Adjusted proportionnellement
detect_and_treat_outliers <- function(df, k = 1.5) {
  
  # Regrouper par Exporter, Importer, Produit et trier par année
  df_grouped <- df %>%
    group_by(Exporter_ISO_Code, Importer_ISO_Code, FABLE_Item) %>%
    arrange(Year) %>%
    mutate(
      # Ajouter les valeurs des années précédentes (t-1) et suivantes (t+1) pour la quantité
      Prev_Year_Qty = lag(Trade_Quantity_Adjusted),
      Next_Year_Qty = lead(Trade_Quantity_Adjusted),
      
      # Calcul des quartiles et IQR pour Trade_Quantity_Adjusted
      Q1_Qty = quantile(Trade_Quantity_Adjusted, 0.25, na.rm = TRUE),
      Q3_Qty = quantile(Trade_Quantity_Adjusted, 0.75, na.rm = TRUE),
      IQR_Qty = Q3_Qty - Q1_Qty,
      Lower_Bound_Qty = Q1_Qty - k * IQR_Qty,
      Upper_Bound_Qty = Q3_Qty + k * IQR_Qty,
      
      # Identifier les outliers pour Trade_Quantity_Adjusted
      Is_Outlier_Qty = Trade_Quantity_Adjusted < Lower_Bound_Qty | Trade_Quantity_Adjusted > Upper_Bound_Qty,
      
      # Traitement des outliers pour Trade_Quantity_Adjusted
      Trade_Quantity_Corrected = case_when(
        # Cas 1 : Pas d'outlier, garder la valeur originale
        !Is_Outlier_Qty ~ Trade_Quantity_Adjusted,
        
        # Cas 2 : Outlier avec deux voisins valides (t-1 et t+1), moyenne des voisins
        Is_Outlier_Qty & !is.na(Prev_Year_Qty) & !is.na(Next_Year_Qty) ~ 
          (Prev_Year_Qty + Next_Year_Qty) / 2,
        
        # Cas 3 : Outlier avec un seul voisin valide (t-1 ou t+1), médiane des voisins
        Is_Outlier_Qty & (xor(!is.na(Prev_Year_Qty), !is.na(Next_Year_Qty))) ~ 
          median(c(Prev_Year_Qty, Next_Year_Qty), na.rm = TRUE),
        
        # Cas 4 : Outlier sans voisins valides, médiane du groupe
        Is_Outlier_Qty & is.na(Prev_Year_Qty) & is.na(Next_Year_Qty) ~ 
          median(Trade_Quantity_Adjusted[!Is_Outlier_Qty], na.rm = TRUE),
        
        # Par défaut, garder la valeur
        TRUE ~ Trade_Quantity_Adjusted
      ),
      
      # Ajustement proportionnel de Trade_Value_Adjusted
      Trade_Value_Corrected = case_when(
        # Si pas d'outlier sur la quantité, garder la valeur originale
        !Is_Outlier_Qty ~ Trade_Value_Adjusted,
        # Si outlier sur la quantité, ajuster proportionnellement
        Is_Outlier_Qty & Trade_Quantity_Adjusted != 0 ~ 
          Trade_Value_Adjusted * (Trade_Quantity_Corrected / Trade_Quantity_Adjusted),
        # Si quantité initiale est 0 (éviter division par 0), garder la valeur
        TRUE ~ Trade_Value_Adjusted
      )
    ) %>%
    ungroup()
  
  return(df_grouped)
}

# Appliquer la fonction au dataframe FOLOUR_trade_dt
FOLOUR_trade_dt_corrected <- detect_and_treat_outliers(FOLOUR_trade_dt, k = 1.5)







#Step 1

FOLUR_trade_dt_vf2<-FOLOUR_trade_dt_corrected %>% 
  select(Exporter_ISO_Code,FABLE_Exporter,Importer_ISO_Code,FABLE_Importer,Year,FABLE_Item,Trade_Quantity_Adjusted,Trade_Quantity_Corrected,Trade_Value_Adjusted,Trade_Value_Corrected)

FOLUR_bil_1<-FOLUR_trade_dt_vf2%>% 
  select(Exporter_ISO_Code,FABLE_Exporter,Importer_ISO_Code,FABLE_Importer,Year,FABLE_Item,Trade_Quantity_Corrected)%>%
  rename(Q_ij = Trade_Quantity_Corrected )


#BACI Net Trade (Export-Import)
exports <- FOLUR_bil_1 %>%
  select(Exporter_ISO_Code,FABLE_Exporter,Importer_ISO_Code,FABLE_Importer,Year,FABLE_Item, Q_ij) %>%
  mutate(Trade_Type = "Export")

imports <- FOLUR_bil_1 %>%
  select(Importer_ISO_Code,FABLE_Importer,Exporter_ISO_Code, FABLE_Exporter, Year, FABLE_Item, Q_ij) %>%
  mutate(Trade_Type = "Import") %>%
  rename(FABLE_Exporter = FABLE_Importer,
         FABLE_Importer= FABLE_Exporter,
         Exporter_ISO_Code=Importer_ISO_Code,
         Importer_ISO_Code=Exporter_ISO_Code)
FOLUR_bil_2 <- bind_rows(exports, imports)

FOLUR_bil_2 <- FOLUR_bil_2 %>%
  mutate(Q_ij = as.numeric(Q_ij))

FOLUR_bil_3 <- FOLUR_bil_2 %>%
  group_by(Exporter_ISO_Code,FABLE_Exporter,Importer_ISO_Code,FABLE_Importer, Year, FABLE_Item) %>%
  summarise(
    Q_export = sum(Q_ij[Trade_Type == "Export"], na.rm = TRUE),  # Total exports
    Q_import = sum(Q_ij[Trade_Type == "Import"], na.rm = TRUE),  # Total imports
    Net_Trade = Q_export - Q_import,                             # Net trade (exports - imports)
    .groups = "drop"                                             # Ungroup after summarizing
  )


FOLUR_bil_4<-FOLUR_bil_2 %>%
  group_by(FABLE_Exporter,FABLE_Importer, Year, FABLE_Item) %>%
summarise(
  Q_export = sum(Q_ij[Trade_Type == "Export"], na.rm = TRUE),  # Total exports
  Q_import = sum(Q_ij[Trade_Type == "Import"], na.rm = TRUE),  # Total imports
  Net_Trade = Q_export - Q_import,                             # Net trade (exports - imports)
  .groups = "drop"                                             # Ungroup after summarizing
)


FOLUR_bil_3_vf1 <- FOLUR_bil_4 %>%
  group_by(FABLE_Exporter, FABLE_Item, Year) %>%
  summarise(
    export_quantity = sum(Q_export, na.rm = TRUE),
    import_quantity = sum(Q_import, na.rm = TRUE),
    Net_Trade = sum(Net_Trade, na.rm = TRUE),
    .groups = 'drop')

FOLUR_bil_3_vf2<-FOLUR_bil_3_vf1%>%
  rename(
    country = FABLE_Exporter,
    product = FABLE_Item,
    year = Year,
    Q_X_baci = export_quantity,
    Q_M_baci = import_quantity,
    net_trade_baci = Net_Trade
  )

unique(FOLUR_bil_3_vf2$product)

FOLUR_bil_3_vf2<-FOLUR_bil_3_vf2%>%
  filter(country != "IRL")


Scenathon_dt_folur<-Scenathon_Fao_filtered_VF2%>%
  filter(product %in% c("Cocoa", "Coffee", "Corn", "Palm_oil", "Rice", "Soyabean", "Wheat"))%>%
  rename(
    Q_X_fao = export_quantity_FAO,
    Q_M_fao = import_quantity_FAO,
    net_trade_fao = Net_Trade_FAO
  )

Scenathon_dt_folur$FABLE_Exporter <- ifelse(
  is.na(match(Scenathon_dt_folur$country, Country_mapping_250120_updated_2$ISO_BACI)),
  Scenathon_dt_folur$country,  # Si pas de correspondance, garder le nom original
  Country_mapping_250120_updated_2$FABLE_cc[match(Scenathon_dt_folur$country, Country_mapping_250120_updated_2$ISO_BACI)]  # Sinon, prendre la valeur mappée
)
Scenathon_dt_folur<-Scenathon_dt_folur%>%
  select(-country)%>%
  rename(country = FABLE_Exporter)%>%
  select(country,everything())



df_ratio <- full_join(FOLUR_bil_3_vf2, Scenathon_dt_folur, 
                   by = c("country", "product", "year"))
df_ratio <- df_ratio %>%
  select(country, product, year, Q_X_baci, Q_X_fao, Q_M_baci, Q_M_fao, net_trade_baci, net_trade_fao) %>%
  mutate(ratio_BACI_FAO = round(net_trade_baci / net_trade_fao, 6))

# Ajouter les deux colonnes à df_ration
df_ratio <- df_ratio %>%
  mutate(
    ratio_in_range = ifelse(ratio_BACI_FAO >= 0.85 & ratio_BACI_FAO <= 1.15, TRUE, FALSE),  # Vrai si ratio entre 0.88 et 1.11
    opposite_signs = ifelse((net_trade_baci * net_trade_fao) < 0, TRUE, FALSE)              # Vrai si signes opposés
  )







# Étape 1 : Filtrer FOLUR_bil_4 pour supprimer les flux où net_trade_fao = 0
FOLUR_bil_4_filtered <- FOLUR_bil_4 %>%
  left_join(df_ratio[, c("country", "product", "year", "net_trade_fao")], 
            by = c("FABLE_Exporter" = "country", "FABLE_Item" = "product", "Year" = "year")) %>%
  filter(net_trade_fao != 0) %>%
  select(-net_trade_fao)

# Étape 2 : Recalculer les net trades et ratios après filtrage
FOLUR_aggregated_new <- FOLUR_bil_4_filtered %>%
  group_by(FABLE_Exporter, FABLE_Item, Year) %>%
  summarise(
    Q_X_baci_new = sum(Q_export, na.rm = TRUE),
    Q_M_baci_new = sum(Q_import, na.rm = TRUE),
    net_trade_baci_new = Q_X_baci_new - Q_M_baci_new,
    .groups = "drop"
  ) %>%
  rename(
    country = FABLE_Exporter,
    product = FABLE_Item,
    year = Year
  )

# Construire df_ratio_new avec les nouveaux ratios
df_ratio_new <- df_ratio %>%
  select(country, product, year, net_trade_fao) %>%
  left_join(FOLUR_aggregated_new[, c("country", "product", "year", "net_trade_baci_new")], 
            by = c("country", "product", "year")) %>%
  mutate(
    ratio_baci_fao_new = round(net_trade_baci_new / net_trade_fao, 6)
  )

# Afficher pour vérifier
print("Ratios après filtrage des flux où net_trade_fao = 0 :")
print(df_ratio_new[, c("country", "product", "year", "net_trade_fao", "net_trade_baci_new", "ratio_baci_fao_new")])

# Étape 3 : Inverser les signes si net_trade_baci_new et net_trade_fao sont opposés
df_ratio_new <- df_ratio_new %>%
  mutate(
    opposite_signs = (net_trade_baci_new * net_trade_fao) < 0
  )

FOLUR_bil_4_corrected <- FOLUR_bil_4_filtered %>%
  left_join(df_ratio_new[, c("country", "product", "year", "opposite_signs")], 
            by = c("FABLE_Exporter" = "country", "FABLE_Item" = "product", "Year" = "year")) %>%
  mutate(
    Q_export_corrected = ifelse(opposite_signs, Q_import, Q_export),
    Q_import_corrected = ifelse(opposite_signs, Q_export, Q_import)
  ) %>%
  select(-opposite_signs)

# Recalculer les nouveaux net trades après inversion
FOLUR_aggregated_corrected <- FOLUR_bil_4_corrected %>%
  group_by(FABLE_Exporter, FABLE_Item, Year) %>%
  summarise(
    Q_X_baci_corrected = sum(Q_export_corrected, na.rm = TRUE),
    Q_M_baci_corrected = sum(Q_import_corrected, na.rm = TRUE),
    net_trade_baci_corrected = Q_X_baci_corrected - Q_M_baci_corrected,
    .groups = "drop"
  ) %>%
  rename(
    country = FABLE_Exporter,
    product = FABLE_Item,
    year = Year
  )

# Mettre à jour df_ratio_new avec les nouveaux ratios après inversion
df_ratio_new <- df_ratio_new %>%
  select(country, product, year, net_trade_fao, net_trade_baci_new, ratio_baci_fao_new) %>%
  left_join(FOLUR_aggregated_corrected[, c("country", "product", "year", "net_trade_baci_corrected")], 
            by = c("country", "product", "year")) %>%
  mutate(
    ratio_baci_fao_corrected = round(net_trade_baci_corrected / net_trade_fao, 6)
  )

# Afficher pour vérifier
print("Ratios après filtrage et inversion des signes :")
print(df_ratio_new[, c("country", "product", "year", "net_trade_fao", "net_trade_baci_corrected", "ratio_baci_fao_corrected")])







# Ajouter les colonnes pour ratio_new et corrected avec indication de range
df_ratio_new <- df_ratio_new %>%
  mutate(
    # Pour ratio_baci_fao_new
    in_range_new = ratio_baci_fao_new >= 0.85 & ratio_baci_fao_new <= 1.15,
    # Pour ratio_baci_fao_corrected
    in_range_corrected = ratio_baci_fao_corrected >= 0.85 & ratio_baci_fao_corrected <= 1.15
  )

# Résumé pour ratio_baci_fao_new
summary_new <- df_ratio_new %>%
  summarise(
    total = n(),
    in_range_new_count = sum(in_range_new, na.rm = TRUE),
    out_range_new_count = sum(!in_range_new, na.rm = TRUE)
  )

# Résumé pour ratio_baci_fao_corrected
summary_corrected <- df_ratio_new %>%
  summarise(
    total = n(),
    in_range_corrected_count = sum(in_range_corrected, na.rm = TRUE),
    out_range_corrected_count = sum(!in_range_corrected, na.rm = TRUE)
  )

# Afficher les résumés
print("Résumé pour ratio_baci_fao_new (après filtrage) :")
print(summary_new)
print("Résumé pour ratio_baci_fao_corrected (après inversion des signes) :")
print(summary_corrected)



colnames(df_ratio_new_2)









library(dplyr)

# Étape 3 : Ajuster exports et imports pour coller à FAO avec écart max ±10%
FOLUR_bil_4_adjusted <- FOLUR_bil_4_corrected %>%
  left_join(df_ratio_new[, c("country", "product", "year", "net_trade_fao")], 
            by = c("FABLE_Exporter" = "country", "FABLE_Item" = "product", "Year" = "year")) %>%
  group_by(FABLE_Exporter, FABLE_Item, Year) %>%
  summarise(
    Q_X_initial = sum(Q_export_corrected, na.rm = TRUE),
    Q_M_initial = sum(Q_import_corrected, na.rm = TRUE),
    net_trade_fao = mean(net_trade_fao, na.rm = TRUE),
    .groups = "drop"
  ) %>%
  mutate(
    # Ajuster net_trade_baci dans [0.90, 1.10] de net_trade_fao
    net_trade_target = pmin(0.85 * net_trade_fao, pmax(0.85 * net_trade_fao, net_trade_fao)),
    T_initial = Q_X_initial + Q_M_initial,
    # Ajuster exports et imports
    Q_X_final = (T_initial + net_trade_target) / 2,
    Q_M_final = (T_initial - net_trade_target) / 2
  )

# Étape 4 : Répartir bilatéralement et gérer les négatifs
FOLUR_bil_4_final <- FOLUR_bil_4_corrected %>%
  left_join(FOLUR_bil_4_adjusted[, c("FABLE_Exporter", "FABLE_Item", "Year", "Q_X_final", "Q_M_final", "Q_X_initial", "Q_M_initial", "net_trade_fao", "net_trade_target")], 
            by = c("FABLE_Exporter", "FABLE_Item", "Year")) %>%
  mutate(
    Q_export_final = Q_export_corrected * (Q_X_final / Q_X_initial),
    Q_import_final = Q_import_corrected * (Q_M_final / Q_M_initial),
    Q_export_final = ifelse(is.na(Q_export_final), Q_export_corrected, Q_export_final),
    Q_import_final = ifelse(is.na(Q_import_final), Q_import_corrected, Q_import_final),
    # Step 1 : Switch si négatif
    Q_export_temp = ifelse(Q_export_final < 0 | Q_import_final < 0, Q_import_final, Q_export_final),
    Q_import_temp = ifelse(Q_export_final < 0 | Q_import_final < 0, Q_export_final, Q_import_final),
    # Step 2 : Forcer positif et limiter l’écart
    Q_export_final = abs(Q_export_temp),
    Q_import_final = abs(Q_import_temp),
    # Step 3 : Ajuster pour limiter l’écart global à ±10%
    net_trade_baci = Q_export_final - Q_import_final,
    adjust_factor = ifelse(abs(net_trade_baci - net_trade_fao) / net_trade_fao > 0.10,
                           (net_trade_fao + Q_import_final) / Q_export_final, 1),
    Q_export_final = Q_export_final * adjust_factor,
    Q_import_final = Q_export_final - net_trade_fao  # Forcer le net trade à coller
  ) %>%
  select(-Q_export_temp, -Q_import_temp, -adjust_factor)

check_mirror <- FOLUR_bil_4_final %>%
  group_by(FABLE_Item, Year) %>%
  summarise(
    total_export = sum(Q_export_final, na.rm = TRUE),
    total_import = sum(Q_import_final, na.rm = TRUE),
    diff_percent = abs(total_export - total_import) / total_export,
    .groups = "drop"
  )

print("Vérification net_trade_baci vs net_trade_fao :")
print(check_net)
print("Vérification écart total_export vs total_import (±10%) :")
print(check_mirror)




FOLUR_bil_4_final_spe<-FOLUR_bil_4_filtered%>%
  group_by(FABLE_Exporter,FABLE_Importer,Year,FABLE_Item)%>%
  mutate(net_trade_ij = Q_export - Q_import )
write.csv(FOLUR_bil_4_final_spe, "FOLUR_bil_4_final_spe.csv", row.names = FALSE)



top_net_exporters <- FOLUR_bil_4_final_spe %>%
  group_by(Year, FABLE_Item, FABLE_Exporter) %>%
  summarise(total_net_trade = sum(net_trade_ij, na.rm = TRUE), .groups = "drop") %>%
  filter(total_net_trade > 0) %>%  # On garde uniquement les exportateurs nets
  arrange(Year, FABLE_Item, desc(total_net_trade))  # Tri décroissant




































