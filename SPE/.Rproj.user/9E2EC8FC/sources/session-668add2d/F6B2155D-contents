# Title: Compute Transport Costs for International Trade (Inter-Country Flows)
# Description: This script processes CEPII distance data, merges it with pre-prepared trade data, 
# computes transport costs using a cost model with distance-based base costs, and handles 
# Inf/-Inf values by imputing regional and global means by product.
# Author: [Adnane Amane]
# Date: 2025-04-25
# Standards: Follows R coding standards (tidyverse style guide, reproducible research)

# Load required libraries
library(dplyr)      # For data manipulation
library(readr)      # For reading/writing CSV files
library(tidyr)      # For handling NA and joins

# Step 1: Load trade data
# Note: Assumes trade data is ready in the specified directory with required columns
data_path <- "C:/Users/Adnane/Documents/GitHub/FOLUR_SPEM/data"
trade_data <- read_csv(file.path(data_path, "trade_data.csv"), na = c("", "NA")) %>%
  select(FABLE_Exporter, FABLE_Importer, Year, FABLE_Item, Q_ij, net_trade_ij) %>%
  filter(Year == 2020)  # Filter for 2020 as per previous code

# Step 2: Process CEPII distance data
# Map ISO3 codes to FABLE country codes
dist_cepii <- dist_cepii %>%
  mutate(
    FABLE_Exporter = Country_mapping_250120_updated_2$FABLE_cc[
      match(iso_o, Country_mapping_250120_updated_2$ISO3_code)
    ],
    FABLE_Importer = Country_mapping_250120_updated_2$FABLE_cc[
      match(iso_d, Country_mapping_250120_updated_2$ISO3_code)
    ]
  )

# Select relevant columns and filter valid FABLE codes
dist_cepii_2 <- dist_cepii %>%
  select(iso_o, FABLE_Exporter, iso_d, FABLE_Importer, distw) %>%
  filter(!is.na(FABLE_Exporter) & !is.na(FABLE_Importer))

# Convert distance to numeric
dist_cepii_2$distw <- as.numeric(dist_cepii_2$distw)

# Aggregate distances by FABLE country pairs
dist_cepii_agg <- dist_cepii_2 %>%
  group_by(FABLE_Exporter, FABLE_Importer) %>%
  mutate(
    dist_adj = mean(distw, na.rm = TRUE)  # Compute mean weighted distance
  ) %>%
  ungroup()

# Create final distance dataset
dist_cepii_fable <- dist_cepii_agg %>%
  select(FABLE_Exporter, FABLE_Importer, dist_adj) %>%
  distinct()

# Step 3: Merge distance and trade data
transport_costs_dt <- full_join(
  dist_cepii_fable,
  trade_data,
  by = c("FABLE_Exporter", "FABLE_Importer")
) %>%
  filter(FABLE_Exporter != FABLE_Importer)  # Keep only inter-country flows

# Step 4: Compute transport costs
# Parameters:
# - base_cost_court: 0.035 USD/tonne/km for short routes (<1,000 km, UNCTAD 2024, Hummels & Skiba 2004)
# - base_cost_long: 0.003 USD/tonne/km for long routes (>5,000 km, UNCTAD 2024, Ferrari et al. 2023)
# - beta_inter: 0.26, elasticity of distance (Hummels & Skiba 2004)
# - gamma: -0.01, economies of scale (OECD 2016, Maritime Transportation Costs in the Grains and Oilseeds Sector)
base_cost_court <- 0.035
base_cost_long <- 0.003
beta_inter <- 0.26
gamma <- -0.01

transport_costs_dt_test <- transport_costs_dt %>%
  mutate(
    is_court = dist_adj < 1000,  # Flag short routes (<1,000 km)
    base_cost = ifelse(is_court, base_cost_court, base_cost_long),  # Assign base cost
    beta = beta_inter,
    ln_dist = log(dist_adj),  # Log of adjusted distance
    ln_quantity_kt = log(Q_ij),  # Log of quantity (assumed in kilotonnes)
    cost_per_tonne_km = base_cost * exp(beta * ln_dist + gamma * ln_quantity_kt),  # Compute cost per tonne-km
    transport_cost_usd_t = cost_per_tonne_km * dist_adj  # Total cost per tonne
  )

# Step 5: Add regional levels for exporters and importers
transport_costs_dt_test <- transport_costs_dt_test %>%
  mutate(
    Regional_lv_i = Country_mapping_250120_updated_2$regional_lv[
      match(FABLE_Exporter, Country_mapping_250120_updated_2$FABLE_cc)
    ],
    Regional_lv_j = Country_mapping_250120_updated_2$regional_lv[
      match(FABLE_Importer, Country_mapping_250120_updated_2$FABLE_cc)
    ]
  )

# Step 6: Handle Inf/-Inf values in transport_cost_usd_t
# - Replace Inf/-Inf with 0
# - Impute 0s with regional mean by product, falling back to global mean by product
global_means <- transport_costs_dt_test %>%
  group_by(FABLE_Item) %>%
  summarise(
    global_mean_cost = mean(transport_cost_usd_t[transport_cost_usd_t != 0], na.rm = TRUE),
    .groups = "drop"
  )

transport_costs_dt_test <- transport_costs_dt_test %>%
  mutate(
    transport_cost_usd_t = ifelse(is.infinite(transport_cost_usd_t), 0, transport_cost_usd_t)  # Replace Inf/-Inf with 0
  ) %>%
  group_by(Regional_lv_i, Regional_lv_j, FABLE_Item) %>%
  mutate(
    regional_mean_cost = mean(transport_cost_usd_t[transport_cost_usd_t != 0], na.rm = TRUE)  # Regional mean by product
  ) %>%
  ungroup() %>%
  left_join(global_means, by = "FABLE_Item") %>%  # Join global means
  mutate(
    transport_cost_usd_t = ifelse(
      transport_cost_usd_t == 0,  # If 0 (former Inf)
      coalesce(regional_mean_cost, global_mean_cost),  # Regional or global mean by product
      transport_cost_usd_t
    )
  ) %>%
  select(-regional_mean_cost, -global_mean_cost)  # Remove temporary columns

# Step 7: Export results
write_csv(
  transport_costs_dt_test,
  file = "C:/Users/Adnane/Documents/GitHub/FOLUR_SPEM/data/250425_transport_costs_dt_all.csv"
)