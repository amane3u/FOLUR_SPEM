cat("Les colonnes 'FABLE_Exporter' et 'FABLE_Importer' ont été ajoutées et le dataframe 'Sigma_2019_vf1' a été filtré.\n")
} else {
warning("Les colonnes 'i' et/ou 'j' n'existent pas dans 'Sigma_2019'.")
}
} else {
warning("Le dataframe 'Sigma_2019_vf1' n'existe pas.")
}
# Fusionner tous les dataframes de la liste en un seul
Tarrifs_dt_1 <- do.call(rbind, lapply(dataframes, get))
colnames(Tarrifs_dt_1)
# Afficher un message de succès
cat("Tous les dataframes ont été fusionnés avec succès.\n")
if (exists("Tarrifs_dt_1")) {
na_items_df <- Tarrifs_dt_1[is.na(Tarrifs_dt_1$Item), ]
cat("Un nouveau dataframe 'na_items_df' a été créé avec les lignes contenant des NA dans la colonne 'Item'.\n")
} else {
warning("Le dataframe 'merged_dataframe' n'existe pas.")
}
Tarrifs_dt_2<-Tarrifs_dt_1%>%
select(i,FABLE_Exporter,j,FABLE_Importer,HS6_Code92,Item,year_baseline,ADV) %>%
rename(Exporter_ISO_Code = i,
Importer_ISO_Code = j,
HS6 = HS6_Code92,
FABLE_Item = Item,
Year = year_baseline,
adv = ADV)
#Plus tard faudra rajouter les flux qui n'existent pas donc creer une fonction que dit que pour chaque pays i il doit avoir un j et remplace le ADV par une regional_mean
Sigma_2019_vf2<-Sigma_2019_vf1%>%
select(exporter,FABLE_Exporter,importer,FABLE_Importer,hs6_2007,Item,year_baseline,adv)%>%
rename(Exporter_ISO_Code = exporter,
Importer_ISO_Code = importer,
HS6 = hs6_2007,
FABLE_Item = Item,
Year = year_baseline)
#Crop_taff_step1
Tarrifs_dt_3 <- Tarrifs_dt_2 %>%
full_join(Sigma_2019_vf2, by = c("Exporter_ISO_Code","FABLE_Exporter","Importer_ISO_Code","FABLE_Importer","Year","HS6","FABLE_Item","adv")) %>%
filter(FABLE_Item != "Beef")%>%
select(Exporter_ISO_Code,FABLE_Exporter,Importer_ISO_Code,FABLE_Importer,Year,HS6,FABLE_Item,adv)
colnames(Tarrifs_dt_4)
Tarrifs_dt_3 <- Tarrifs_dt_3 %>%
group_by(Exporter_ISO_Code, Importer_ISO_Code, Year, FABLE_Item) %>%
mutate(adv_agg = mean(adv, na.rm = TRUE)) %>%
ungroup()
Tarrifs_dt_4<-Tarrifs_dt_3 %>%
full_join(FAO_prices_dt_pt1, by = c("Exporter_ISO_Code","Year","FABLE_Item"))
Tarrifs_dt_4$FABLE_Exporter <- Country_mapping_250120_updated_2$FABLE_cc[match(Tarrifs_dt_4$Exporter_ISO_Code, Country_mapping_250120_updated_2$ISO3_code)]
Tarrifs_dt_4<-Tarrifs_dt_4%>%
group_by(FABLE_Exporter,Year,FABLE_Item)%>%
mutate(prodprice_i_agg= median(prodprice_i, na.rm = TRUE))%>%
ungroup()
Tarrifs_dt_4<-Tarrifs_dt_4%>%
group_by(FABLE_Exporter,Year,FABLE_Item)%>%
mutate(adv_regional= mean(adv_agg, na.rm = TRUE))%>%
ungroup()
Tarrifs_dt_4<-Tarrifs_dt_4%>%
group_by(Year,FABLE_Item)%>%
mutate(worldprice= mean(prodprice_i, na.rm = TRUE))%>%
ungroup()
Tarrifs_dt_4 <- Tarrifs_dt_4 %>%
mutate(
# Calcul de sdt_ij (specif tarrif values) en fonction des prix disponibles
sdt_ij = case_when(
!is.na(prodprice_i) & !is.na(adv_agg) ~ adv_agg * prodprice_i,
is.na(prodprice_i) & !is.na(adv_agg) & !is.na(prodprice_i_agg) ~ adv_agg * prodprice_i_agg,
is.na(adv_agg) & !is.na(prodprice_i) & !is.na(adv_regional) ~ adv_regional * prodprice_i,
is.na(adv_agg) & is.na(prodprice_i) & !is.na(prodprice_i_agg) & !is.na(adv_regional) ~ adv_regional * prodprice_i_agg,
is.na(prodprice_i) & is.na(prodprice_i_agg) & !is.na(worldprice) & !is.na(adv) ~ adv * worldprice,
is.na(prodprice_i) & is.na(prodprice_i_agg) & is.na(adv) & !is.na(worldprice) & !is.na(adv_agg) ~ adv_agg * worldprice,
is.na(prodprice_i) & is.na(prodprice_i_agg) & is.na(adv) & is.na(adv_agg) & !is.na(worldprice) & !is.na(adv_regional) ~ adv_regional * worldprice,
TRUE ~ NA_real_
),
# Indicateur d'utilisation du prix régional
used_regional = case_when(
!is.na(prodprice_i) ~ "No",
is.na(prodprice_i) & !is.na(prodprice_i_agg) ~ "Yes",
TRUE ~ NA_character_
)
)
Tarrifs_dt_na_4 <- Tarrifs_dt_4 %>%
filter(is.na(sdt_ij))
View(Tarrifs_dt_4)
Tarrifs_dt_4 <- Tarrifs_dt_4 %>%
mutate(
# Calcul de sdt_ij (specific tariff values) en fonction des prix disponibles
sdt_ij = case_when(
!is.na(prodprice_i) & !is.na(adv_agg) ~ adv_agg * prodprice_i,
is.na(prodprice_i) & !is.na(adv_agg) & !is.na(prodprice_i_agg) ~ adv_agg * prodprice_i_agg,
is.na(adv_agg) & !is.na(prodprice_i) & !is.na(adv_regional) ~ adv_regional * prodprice_i,
is.na(adv_agg) & is.na(prodprice_i) & !is.na(prodprice_i_agg) & !is.na(adv_regional) ~ adv_regional * prodprice_i_agg,
is.na(prodprice_i) & is.na(prodprice_i_agg) & !is.na(worldprice) & !is.na(adv) ~ adv * worldprice,
is.na(prodprice_i) & is.na(prodprice_i_agg) & !is.na(adv) & !is.na(adv_agg) & !is.na(worldprice) ~ adv_agg * worldprice,
is.na(prodprice_i) & is.na(prodprice_i_agg) & is.na(adv) & is.na(adv_agg) & !is.na(worldprice) & !is.na(adv_regional) ~ adv_regional * worldprice,
TRUE ~ NA_real_
),
# Indicateur d'utilisation du prix régional
used_regional = case_when(
!is.na(prodprice_i) ~ "No",
is.na(prodprice_i) & !is.na(prodprice_i_agg) ~ "Yes",
TRUE ~ NA_character_
)
) %>%
# Check for duplicates and remove them
mutate(row_id = row_number()) %>%  # Temp ID to track original rows
group_by_all() %>%  # Group by all columns to find exact duplicates
mutate(duplicate_count = n()) %>%  # Count duplicates per unique row
ungroup() %>%
filter(!duplicated(.)) %>%  # Keep only first occurrence of each unique row
select(-row_id, -duplicate_count)  # Drop temp columns
# Check results
cat("Rows after removing duplicates:", nrow(Tarrifs_dt_4), "\n")
cat("Number of duplicates removed:", sum(Tarrifs_dt_4$duplicate_count > 1, na.rm = TRUE), "\n")
Tarrifs_dt_5<-Tarrifs_dt_4 %>%
distinct(sdt_ij, .keep_all = TRUE))
Tarrifs_dt_5<-Tarrifs_dt_4 %>%
distinct(sdt_ij, .keep_all = TRUE)
View(Tarrifs_dt_5)
Tarrifs_dt_3 <- Tarrifs_dt_3 %>%
group_by(Exporter_ISO_Code, Importer_ISO_Code, Year, FABLE_Item) %>%
mutate(adv_agg = mean(adv, na.rm = TRUE)) %>%
distinct(adv_agg, .keep_all = TRUE)
ungroup()
# Step 1: Aggregate adv to adv_agg
Tarrifs_dt_3 <- Tarrifs_dt_3 %>%
group_by(Exporter_ISO_Code, Importer_ISO_Code, Year, FABLE_Item) %>%
mutate(adv_agg = mean(adv, na.rm = TRUE)) %>%
ungroup() %>%  # Ungroup before distinct
distinct(.keep_all = TRUE)  # Keep unique rows based on all columns
# Step 2: Join with producer prices and compute aggregates
Tarrifs_dt_4 <- Tarrifs_dt_3 %>%
full_join(FAO_prices_dt_pt1, by = c("Exporter_ISO_Code", "Year", "FABLE_Item")) %>%
mutate(FABLE_Exporter = Country_mapping_250120_updated_2$FABLE_cc[match(Exporter_ISO_Code, Country_mapping_250120_updated_2$ISO3_code)]) %>%
group_by(FABLE_Exporter, Year, FABLE_Item) %>%
mutate(prodprice_i_agg = median(prodprice_i, na.rm = TRUE)) %>%
ungroup() %>%
group_by(FABLE_Exporter, Year, FABLE_Item) %>%
mutate(adv_regional = mean(adv_agg, na.rm = TRUE)) %>%
ungroup() %>%
group_by(Year, FABLE_Item) %>%
mutate(worldprice = mean(prodprice_i, na.rm = TRUE)) %>%
ungroup() %>%
mutate(
# Calculate sdt_ij (specific tariff values)
sdt_ij = case_when(
!is.na(prodprice_i) & !is.na(adv_agg) ~ adv_agg * prodprice_i,
is.na(prodprice_i) & !is.na(adv_agg) & !is.na(prodprice_i_agg) ~ adv_agg * prodprice_i_agg,
is.na(adv_agg) & !is.na(prodprice_i) & !is.na(adv_regional) ~ adv_regional * prodprice_i,
is.na(adv_agg) & is.na(prodprice_i) & !is.na(prodprice_i_agg) & !is.na(adv_regional) ~ adv_regional * prodprice_i_agg,
is.na(prodprice_i) & is.na(prodprice_i_agg) & !is.na(worldprice) & !is.na(adv) ~ adv * worldprice,
is.na(prodprice_i) & is.na(prodprice_i_agg) & !is.na(adv) & !is.na(adv_agg) & !is.na(worldprice) ~ adv_agg * worldprice,
is.na(prodprice_i) & is.na(prodprice_i_agg) & is.na(adv) & is.na(adv_agg) & !is.na(worldprice) & !is.na(adv_regional) ~ adv_regional * worldprice,
TRUE ~ NA_real_
),
# Indicator for regional price usage
used_regional = case_when(
!is.na(prodprice_i) ~ "No",
is.na(prodprice_i) & !is.na(prodprice_i_agg) ~ "Yes",
TRUE ~ NA_character_
)
)
Tarrifs_dt_na_4 <- Tarrifs_dt_4 %>%
filter(is.na(sdt_ij))
View(Tarrifs_dt_4)
View(Matching_HS6_to_name_product)
#Crop_taff_step1
Tarrifs_dt_3 <- Tarrifs_dt_2 %>%
full_join(Sigma_2019_vf2, by = c("Exporter_ISO_Code","FABLE_Exporter","Importer_ISO_Code","FABLE_Importer","Year","HS6","FABLE_Item","adv")) %>%
filter(FABLE_Item != "Beef")%>%
select(Exporter_ISO_Code,FABLE_Exporter,Importer_ISO_Code,FABLE_Importer,Year,HS6,FABLE_Item,adv)
Tarrifs_dt_3 <- Tarrifs_dt_3 %>%
group_by(Exporter_ISO_Code, Importer_ISO_Code, Year, FABLE_Item) %>%
mutate(adv_agg = mean(adv, na.rm = TRUE)) %>%
ungroup() %>%  # Ungroup before distinct
distinct(adv_agg.keep_all = TRUE)  # Keep unique rows based on all columns
View(Tarrifs_dt_3)
# Step 1: Aggregate adv to adv_agg
Tarrifs_dt_35 <- Tarrifs_dt_3 %>%
group_by(Exporter_ISO_Code, Importer_ISO_Code, Year, FABLE_Item) %>%
mutate(adv_agg = mean(adv, na.rm = TRUE)) %>%
ungroup() %>%  # Ungroup before distinct
distinct(adv_agg.keep_all = TRUE)  # Keep unique rows based on all columns
Tarrifs_dt_3 <- Tarrifs_dt_2 %>%
full_join(Sigma_2019_vf2, by = c("Exporter_ISO_Code","FABLE_Exporter","Importer_ISO_Code","FABLE_Importer","Year","HS6","FABLE_Item","adv")) %>%
filter(FABLE_Item != "Beef")%>%
select(Exporter_ISO_Code,FABLE_Exporter,Importer_ISO_Code,FABLE_Importer,Year,HS6,FABLE_Item,adv)
colnames(Tarrifs_dt_4)
colnames(Tarrifs_dt_3)
Tarrifs_dt_3 <- Tarrifs_dt_3 %>%
group_by(Exporter_ISO_Code, Importer_ISO_Code, Year, FABLE_Item) %>%
mutate(adv_agg = mean(adv, na.rm = TRUE)) %>%
select(- adv, -HS6 )%>%
ungroup()
View(Tarrifs_dt_3)
Tarrifs_dt_3_pt1 %>% Tarrifs_dt_3  # Ungroup before distinct
Tarrifs_dt_3_pt1 %>% Tarrifs_dt_3%>%# Ungroup before distinct
distinct(.keep_all = TRUE)  # Keep unique rows based on all columns
Tarrifs_dt_3_pt1 <- Tarrifs_dt_3 %>%
distinct(.keep_all = TRUE) %>%  # Keep unique rows based on all columns
ungroup()  # Ungroup after distinct
View(Tarrifs_dt_3_pt1)
# Step 2: Join with producer prices and compute aggregates
Tarrifs_dt_4 <- Tarrifs_dt_3_pt1 %>%
full_join(FAO_prices_dt_pt1, by = c("Exporter_ISO_Code", "Year", "FABLE_Item")) %>%
mutate(FABLE_Exporter = Country_mapping_250120_updated_2$FABLE_cc[match(Exporter_ISO_Code, Country_mapping_250120_updated_2$ISO3_code)]) %>%
group_by(FABLE_Exporter, Year, FABLE_Item) %>%
mutate(prodprice_i_agg = median(prodprice_i, na.rm = TRUE)) %>%
ungroup() %>%
group_by(FABLE_Exporter, Year, FABLE_Item) %>%
mutate(adv_regional = mean(adv_agg, na.rm = TRUE)) %>%
ungroup() %>%
group_by(Year, FABLE_Item) %>%
mutate(worldprice = mean(prodprice_i, na.rm = TRUE)) %>%
ungroup() %>%
mutate(
# Calculate sdt_ij (specific tariff values)
sdt_ij = case_when(
!is.na(prodprice_i) & !is.na(adv_agg) ~ adv_agg * prodprice_i,
is.na(prodprice_i) & !is.na(adv_agg) & !is.na(prodprice_i_agg) ~ adv_agg * prodprice_i_agg,
is.na(adv_agg) & !is.na(prodprice_i) & !is.na(adv_regional) ~ adv_regional * prodprice_i,
is.na(adv_agg) & is.na(prodprice_i) & !is.na(prodprice_i_agg) & !is.na(adv_regional) ~ adv_regional * prodprice_i_agg,
is.na(prodprice_i) & is.na(prodprice_i_agg) & !is.na(worldprice) & !is.na(adv) ~ adv * worldprice,
is.na(prodprice_i) & is.na(prodprice_i_agg) & !is.na(adv) & !is.na(adv_agg) & !is.na(worldprice) ~ adv_agg * worldprice,
is.na(prodprice_i) & is.na(prodprice_i_agg) & is.na(adv) & is.na(adv_agg) & !is.na(worldprice) & !is.na(adv_regional) ~ adv_regional * worldprice,
TRUE ~ NA_real_
),
# Indicator for regional price usage
used_regional = case_when(
!is.na(prodprice_i) ~ "No",
is.na(prodprice_i) & !is.na(prodprice_i_agg) ~ "Yes",
TRUE ~ NA_character_
)
)
# Ensure Tarrifs_dt_3_pt1 is ungrouped and process
Tarrifs_dt_4 <- Tarrifs_dt_3_pt1 %>%
ungroup() %>%  # Ensure no residual grouping
full_join(FAO_prices_dt_pt1, by = c("Exporter_ISO_Code", "Year", "FABLE_Item")) %>%
mutate(FABLE_Exporter = Country_mapping_250120_updated_2$FABLE_cc[match(Exporter_ISO_Code, Country_mapping_250120_updated_2$ISO3_code)]) %>%
group_by(FABLE_Exporter, Year, FABLE_Item) %>%
mutate(prodprice_i_agg = median(prodprice_i, na.rm = TRUE)) %>%
ungroup() %>%
group_by(FABLE_Exporter, Year, FABLE_Item) %>%
mutate(adv_regional = mean(adv_agg, na.rm = TRUE)) %>%
ungroup() %>%
group_by(Year, FABLE_Item) %>%
mutate(worldprice = mean(prodprice_i, na.rm = TRUE)) %>%
ungroup() %>%
mutate(
# Calculate sdt_ij (specific tariff values) with adv replaced by adv_agg
sdt_ij = case_when(
!is.na(prodprice_i) & !is.na(adv_agg) ~ adv_agg * prodprice_i,
is.na(prodprice_i) & !is.na(adv_agg) & !is.na(prodprice_i_agg) ~ adv_agg * prodprice_i_agg,
is.na(adv_agg) & !is.na(prodprice_i) & !is.na(adv_regional) ~ adv_regional * prodprice_i,
is.na(adv_agg) & is.na(prodprice_i) & !is.na(prodprice_i_agg) & !is.na(adv_regional) ~ adv_regional * prodprice_i_agg,
is.na(prodprice_i) & is.na(prodprice_i_agg) & !is.na(worldprice) & !is.na(adv_agg) ~ adv_agg * worldprice,  # Replaced adv with adv_agg
is.na(prodprice_i) & is.na(prodprice_i_agg) & !is.na(adv_agg) & !is.na(worldprice) ~ adv_agg * worldprice,  # Replaced adv with adv_agg
is.na(prodprice_i) & is.na(prodprice_i_agg) & is.na(adv_agg) & !is.na(worldprice) & !is.na(adv_regional) ~ adv_regional * worldprice,
TRUE ~ NA_real_
),
# Indicator for regional price usage
used_regional = case_when(
!is.na(prodprice_i) ~ "No",
is.na(prodprice_i) & !is.na(prodprice_i_agg) ~ "Yes",
TRUE ~ NA_character_
)
)
# Check the result
Tarrifs_dt_na_4 <- Tarrifs_dt_4 %>%
filter(is.na(sdt_ij))
View(Tarrifs_dt_4)
Tarrifs_dt_4_double <- Tarrifs_dt_4 %>%
group_by(Exporter_ISO_Code,Importer_ISO_Code,sdt_ij) %>%  # Group by sdt_ij to find duplicates
filter(n() > 1) %>%   # Keep only groups with more than one occurrence
ungroup()
View(Tarrifs_dt_4_double)
Tarrifs_dt_4_double <- Tarrifs_dt_4 %>%
group_by(Exporter_ISO_Code,Importer_ISO_Code,FABLE_Item,sdt_ij) %>%  # Group by sdt_ij to find duplicates
filter(n() > 1) %>%   # Keep only groups with more than one occurrence
ungroup()
Tarrifs_dt_4_double <- Tarrifs_dt_4 %>%
group_by(Exporter_ISO_Code,Importer_ISO_Code,FABLE_Item,Year,sdt_ij) %>%  # Group by sdt_ij to find duplicates
filter(n() > 1) %>%   # Keep only groups with more than one occurrence
ungroup()
write.csv(Tarrifs_dt_4,
file = "C:\\Users\\Adnane\\Desktop\\BACI-MacMap\\MAC-MAPHS6\\data_output\\250403_tariff_specific_values_exd.csv",
row.names = FALSE)
# Confirm save
cat("File saved as: C:\\Users\\Adnane\\Desktop\\BACI-MacMap\\MAC-MAPHS6\\data_output\\250403_tariff_specific_values.csv\n")
colnames(Tarrifs_dt_4)
Tarrifs_dt_5<-Tarrifs_dt_4%>%
select(Exporter_ISO_Code,FABLE_Exporter,Importer_ISO_Code,FABLE_Importer,Year,FABLE_Item,adv_agg,sdt_ij)%>%
rename(adv_ij = adv_agg)
View(Tarrifs_dt_5)
Tarrifs_dt_6<-Tarrifs_dt_5%>%
group_by(Exporter_ISO_Code,FABLE_Exporter,Importer_ISO_Code,FABLE_Importer,Year,FABLE_Item)%>%
mutate(sdt_ij_agg=mean(sdt_ij, na.rm = TRUE))
View(Tarrifs_dt_6)
Tarrifs_dt_6<-Tarrifs_dt_5%>%
group_by(FABLE_Exporter,FABLE_Importer,Year,FABLE_Item)%>%
mutate(sdt_ij_agg=mean(sdt_ij, na.rm = TRUE))
write.csv(Tarrifs_dt_6,
file = "C:\\Users\\Adnane\\Desktop\\BACI-MacMap\\MAC-MAPHS6\\data_output\\250403_tariff_specific_values_exd.csv",
row.names = FALSE)
#Step 3: Hummels specification
rm(list ls())
rm(list=ls())
load("C:/Users/Adnane/Desktop/BACI-MacMap/R_baci_folur_251803.RData")
library(readxl)
library(dplyr)
library(here)
library(janitor)
library(tidyr)
library(stringr)
# data --------------------------------------------------------------------
# Define dairy animals (adjust as needed)
dairy_animals <- c("Buffalo", "Sheep", "Goats", "Camels", "Cattle")
df <- read_excel(here("data","250401_EFDB_output_Livestock_2006.xlsx")) %>%
janitor::clean_names()
# data --------------------------------------------------------------------
# Define dairy animals (adjust as needed)
dairy_animals <- c("Buffalo", "Sheep", "Goats", "Camels", "Cattle")
df <- read_excel(here("data","250401_EFDB_output_Livestock_2006.xlsx")) %>%
janitor::clean_names()
# Load data
library(dplyr)
library(tidyr)
library(reader)
FAO_prices <- read.csv("C:\\Users\\Adnane\\Desktop\\BACI-MacMap\\Prices_prod_data\\FAOSTAT_data_en_3-27-2025.csv")
# Select key columns
FAO_prices <- select(FAO_prices, Area.Code..ISO3., Item, Year, Value)
# Map FABLE country codes
FAO_prices$FABLE_Exporter <- Country_mapping_250120_updated_2$FABLE_cc[
match(FAO_prices$Area.Code..ISO3., Country_mapping_250120_updated_2$ISO3_code)
]
# Map item names using case_when
FAO_prices <- FAO_prices %>%
mutate(FABLE_Item = case_when(
Item == "Coffee, green" ~ "Coffee",
Item == "Cocoa beans" ~ "Cocoa",
Item == "Maize (corn)" ~ "Corn",
Item == "Wheat" ~ "Wheat",
Item == "Palm oil" ~ "Palm Oil",
Item == "Soya beans" ~ "Soyabean",
Item == "Rice" ~ "Rice",
TRUE ~ Item  # Default: keep original Item if no match
))
# Rename and reorder columns
FAO_prices <- FAO_prices %>%
rename(Exporter_ISO_Code = Area.Code..ISO3.) %>%
select(Exporter_ISO_Code, FABLE_Exporter, FABLE_Item, Year, Value)
FAO_prices_clean <- FAO_prices %>%
rename(prod_price_i = Value) %>%
group_by(Exporter_ISO_Code, FABLE_Item) %>%
arrange(Year) %>%
mutate(
# Local median excluding current point
local_median = sapply(seq_along(prod_price_i), function(i) median(prod_price_i[-i], na.rm = TRUE)),
# Relative deviation from local median
rel_deviation = abs((prod_price_i - local_median) / local_median),
# Flag outliers: > 100% deviation from local median
Is_Outlier = rel_deviation > 1
) %>%
ungroup() %>%
select(Exporter_ISO_Code, FABLE_Item, Year, prod_price_i, Is_Outlier, rel_deviation)
FAO_prices_clean_aft<-FAO_prices_clean%>%
mutate(prod_price_i_aft=case_when(
!Is_Outlier ~ prod_price_i,  # Keep if not outlier,
Is_Outlier  ~ prod_price_i*(1/rel_deviation)
))
FAO_prices_clean_aft$FABLE_Exporter <- Country_mapping_250120_updated_2$FABLE_cc[match(FAO_prices_clean_aft$Exporter_ISO_Code, Country_mapping_250120_updated_2$ISO3_code)]
FAO_prices_dt <- FAO_prices_clean_aft %>%
group_by(FABLE_Exporter, FABLE_Item, Year) %>%
mutate(prod_price_i_aft_agg = median(prod_price_i_aft, na.rm = TRUE)) %>%
ungroup()%>%
select(Exporter_ISO_Code,FABLE_Exporter,FABLE_Item,Year,prod_price_i_aft,prod_price_i_aft_agg) %>%
rename(prodprice_i = prod_price_i_aft,
prodprice_i_agg=prod_price_i_aft_agg)%>%
filter(!is.na(FABLE_Exporter))
colnames(FAO_prices_dt)
FAO_prices_dt_pt1<-FAO_prices_dt%>%select(Exporter_ISO_Code,FABLE_Item,Year,prodprice_i)
FAO_prices_dt_pt2<-FAO_prices_dt%>%select(FABLE_Exporter,FABLE_Item,Year,prodprice_i_agg)
View(FAO_prices_dt)
View(FAO_prices_dt_pt2)
rm(list = setdiff(ls(), c("FAO_prices_dt", "Country_mapping_250120_updated_2")))
View(FAO_prices_dt)
FAO_prices_dt_pt1<-FAO_prices_dt%>%select(Exporter_ISO_Code,FABLE_Item,Year,prodprice_i)
FAO_prices_dt_pt2<-FAO_prices_dt%>%select(FABLE_Exporter,FABLE_Item,Year,prodprice_i_agg)
write.csv(FAO_prices_dt_pt2,
file = "C:\\Users\\Adnane\\Desktop\\BACI-MacMap\\MAC-MAPHS6\\data_output\\250409_FAO_prices_dt_red.csv",
row.names = FALSE)
Tarrifs_dt_4 <- read.csv("C:\\Users\\Adnane\\Desktop\\BACI-MacMap\\MAC-MAPHS6\\data_output\\250403_tariff_specific_values_exd.csv")
View(Tarrifs_dt_4)
Tarrifs_dt_5<-Tarrifs_dt_4%>%
select(Exporter_ISO_Code,FABLE_Exporter,Importer_ISO_Code,FABLE_Importer,Year,FABLE_Item,adv_agg,sdt_ij)%>%
rename(adv_ij = adv_agg)
Tarrifs_dt_4<-Tarrifs_dt_4%>%
group_by(FABLE_Exporter,FABLE_Importer,Year,FABLE_Item)%>%
mutate(adv_ij_agg=mean(adv_ij_agg, na.rm = TRUE))
Tarrifs_dt_4<-Tarrifs_dt_4%>%
group_by(FABLE_Exporter,FABLE_Importer,Year,FABLE_Item)%>%
mutate(adv_ij_agg=mean(adv_ij, na.rm = TRUE))
Tarrifs_dt_5<-Tarrifs_dt_4%>%
select(FABLE_Exporter,FABLE_Importer,Year,FABLE_Item,adv_ij_agg,sdt_ij)%>%
distinct(.keep_all = TRUE) %>%
ungroup()
View(Tarrifs_dt_5)
Tarrifs_dt_5<-Tarrifs_dt_5%>%
filter(FABLE_Exporter = FABLE_Importer)
Tarrifs_dt_5<-Tarrifs_dt_5%>%
filter(FABLE_Exporter == FABLE_Importer)
Tarrifs_dt_5<-Tarrifs_dt_4%>%
select(FABLE_Exporter,FABLE_Importer,Year,FABLE_Item,adv_ij_agg,sdt_ij)%>%
distinct(.keep_all = TRUE) %>%
ungroup()
Tarrifs_dt_5<-Tarrifs_dt_5%>%
filter(FABLE_Exporter != FABLE_Importer)
Tarrifs_dt_na_4 <- Tarrifs_dt_4 %>%
filter(is.na(sdt_ij))
colnames(Tarrifs_dt_5)
# 1. On extrait les dimensions uniques
exporters <- unique(Tarrifs_dt_5$FABLE_Exporter)
importers <- unique(Tarrifs_dt_5$FABLE_Importer)
years     <- unique(Tarrifs_dt_5$Year)
items     <- unique(Tarrifs_dt_5$FABLE_Item)
# 2. On crée toutes les combinaisons possibles (produit cartésien)
all_combinations <- expand.grid(
FABLE_Exporter = exporters,
FABLE_Importer = importers,
Year = years,
FABLE_Item = items,
stringsAsFactors = FALSE
)
# 3. On fusionne avec les données existantes pour combler les manquants
Tarrifs_dt_complete <- all_combinations %>%
left_join(Tarrifs_dt_5, by = c("FABLE_Exporter", "FABLE_Importer", "Year", "FABLE_Item")) %>%
mutate(
adv_ij_agg = ifelse(is.na(adv_ij_agg), 0, adv_ij_agg),
sdt_ij     = ifelse(is.na(sdt_ij), 0, sdt_ij)
)
# Résultat final : tous les flux possibles avec 0 si données manquantes
print(Tarrifs_dt_complete)
View(Tarrifs_dt_complete)
library(dplyr)
library(tidyr)
# 1. Extraire les dimensions uniques
exporters <- unique(Tarrifs_dt_5$FABLE_Exporter)
importers <- unique(Tarrifs_dt_5$FABLE_Importer)
years     <- unique(Tarrifs_dt_5$Year)
items     <- unique(Tarrifs_dt_5$FABLE_Item)
# 2. Créer toutes les combinaisons possibles sans les flux intra
all_combinations <- expand.grid(
FABLE_Exporter = exporters,
FABLE_Importer = importers,
Year = years,
FABLE_Item = items,
stringsAsFactors = FALSE
) %>%
filter(FABLE_Exporter != FABLE_Importer)  # Exclusion des flux intra
# 3. Fusionner avec les données existantes
Tarrifs_dt_complete <- all_combinations %>%
left_join(Tarrifs_dt_5, by = c("FABLE_Exporter", "FABLE_Importer", "Year", "FABLE_Item")) %>%
mutate(
adv_ij_agg = ifelse(is.na(adv_ij_agg), 0, adv_ij_agg),
sdt_ij     = ifelse(is.na(sdt_ij), 0, sdt_ij)
)
# Afficher un aperçu
print(head(Tarrifs_dt_complete))
write.csv(Tarrifs_dt_complete,
file = "C:\\Users\\Adnane\\Desktop\\BACI-MacMap\\MAC-MAPHS6\\data_output\\250409_tariff_specific_values_red.csv",
row.names = FALSE)
FOLUR_trade_dt <- read.csv("C:\\Users\\Adnane\\Desktop\\BACI-MacMap\\FOLUR_bil_4_final_spe.csv")
load("C:/Users/Adnane/Desktop/BACI-MacMap/Transport_costs/230225_Transport_costs.RData")
View(transport_costs_dt)
# Transport costs:
#Step 1: BACI data extration for products
#Step 2: Geodata
#Step 3: Hummels specification
rm(list=ls())
#Step 1
J_rice_ <- read.csv("C:/Users/Adnane/Documents/bilateral_trade_cost_RICE.csv")
J_soyb<-read.csv("C:/Users/Adnane/Desktop/BACI-MacMap/SPE_doc/SPE_jasper_input/Trade_cost/bilateral_trade_cost_SOYB.csv")
J_wheat<-read.csv("C:/Users/Adnane/Desktop/BACI-MacMap/SPE_doc/SPE_jasper_input/Trade_cost/bilateral_trade_cost_WHEA.csv")
J_Corn<-read.csv("C:/Users/Adnane/Desktop/BACI-MacMap/SPE_doc/SPE_jasper_input/Trade_cost/bilateral_trade_cost_MAIZ.csv")
"C:\Users\Adnane\Downloads\FAOSTAT_data_en_3-26-2025.csv"
library(readxl)
dist_cepii <- read_excel("C:/Users/Adnane/Desktop/BACI-MacMap/Transport_costs/dist_cepii.xls")
View(dist_cepii)
# Création des colonnes en faisant correspondre les codes ISO3 avec FABLE_cc
dist_cepii$FABLE_Exporter <- Country_mapping_250120_updated_2$FABLE_cc[match(dist_cepii$iso_o, Country_mapping_250120_updated_2$ISO3_code)]
library(readxl)
Country_mapping_250120_updated_2 <- read_excel("C:/Users/Adnane/Desktop/BACI-MacMap/BACI/Country_mapping_250120_updated_2.xlsx")
View(Country_mapping_250120_updated_2)
# Création des colonnes en faisant correspondre les codes ISO3 avec FABLE_cc
dist_cepii$FABLE_Exporter <- Country_mapping_250120_updated_2$FABLE_cc[match(dist_cepii$iso_o, Country_mapping_250120_updated_2$ISO3_code)]
dist_cepii$FABLE_Importer <- Country_mapping_250120_updated_2$FABLE_cc[match(dist_cepii$iso_d, Country_mapping_250120_updated_2$ISO3_code)]
dist_cepii_2<-dist_cepii %>%
select(iso_o,FABLE_Exporter,iso_d,FABLE_Importer,distw)
dist_cepii_2 <- dist_cepii_2 %>% filter(!is.na(FABLE_Exporter) & !is.na(FABLE_Importer))
unique(dist_cepii_2$FABLE_Exporter)
dist_cepii_2 <- dist_cepii_2 %>%
filter(iso_o != iso_d)
dist_cepii_2$distw <- as.numeric(dist_cepii_2$distw)
dist_cepii_agg<-dist_cepii_2%>%
group_by(FABLE_Exporter,FABLE_Importer)%>%
mutate(dist_adj=mean(distw,na.rm=TRUE),.groups="drop")
dist_cepii_agg<-dist_cepii_agg%>%
select(-.groups)
dist_cepii_agg_2 <- dist_cepii_agg %>%
filter(FABLE_Exporter != FABLE_Importer)%>%
select(- distw)%>%
distinct(dist_adj)
FOLUR_trade_dt <- read.csv("C:\\Users\\Adnane\\Desktop\\BACI-MacMap\\FOLUR_bil_4_final_spe.csv")
View(FOLUR_trade_dt)
